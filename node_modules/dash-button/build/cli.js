#!/usr/bin/env node
'use strict';

var _Set = require('babel-runtime/core-js/set').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

var _pcap = require('pcap');

var _pcap2 = _interopRequireDefault(_pcap);

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _ArpProbes = require('./ArpProbes');

var _ArpProbes2 = _interopRequireDefault(_ArpProbes);

var _MacAddresses = require('./MacAddresses');

var _MacAddresses2 = _interopRequireDefault(_MacAddresses);

var _NetworkInterfaces = require('./NetworkInterfaces');

var _NetworkInterfaces2 = _interopRequireDefault(_NetworkInterfaces);

if (require.main === module) {
  let parser = _yargs2.default.usage('Usage: $0 <command> [options]').command('scan', 'Scan for ARP probes').example('$0 scan -i wlan0', 'Scan for ARP probes on the given network interface').help('h').alias('h', 'help').version(function () {
    return require('../package.json').version;
  }).alias('i', 'interface').nargs('i', 1).default('i', _NetworkInterfaces2.default.getDefault()).describe('i', 'The network interface on which to listen');
  let argv = parser.argv;

  let commands = new _Set(argv._);
  if (!commands.size) {
    console.log(parser.help());
  } else if (commands.has('scan')) {
    let interfaceName = argv.interface;
    let pcapSession = _ArpProbes2.default.createCaptureSession(interfaceName);
    pcapSession.addListener('packet', function (rawPacket) {
      let packet = _pcap2.default.decode(rawPacket);
      let sourceMacAddress = _MacAddresses2.default.getEthernetSource(packet);
      console.log('Detected an ARP probe from %s', sourceMacAddress);
    });
    console.log('Scanning for ARP probes on %s...', interfaceName);
  }
}